{
    "sourceFile": "my-portfolio/src/pages/Login/LogoutTimer.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757602272882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757602272882,
            "name": "Commit-0",
            "content": "import React, { useContext, useMemo } from \"react\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport { LoginContext } from \"./LoginContextProvider\";\r\n\r\n// timer app\r\nexport const LogoutTimer = () => {\r\n  const loggedOut = useContext(LoginContext);\r\n\r\n  const getExpireTime = localStorage.getItem(\"user\");\r\n  // const expireGoals = new Date(getExpireTime).getTime()\r\n  const expireGoals = new Date(getExpireTime)\r\n  const currentTime = new Date()\r\n  const distance = expireGoals - currentTime;\r\n  // const leftTime = Math.floor(distance);\r\n  // const [timerDays, setTimerDays] = useState(\"00\");\r\n  const [timerHours, setTimerHours] = useState('');\r\n  const [timerMinutes, setTimerMinutes] = useState('');\r\n  const [timerSeconds, setTimerSeconds] = useState('');\r\n\r\n  let interval = useRef();\r\n\r\n  const initHours = useMemo(() => {\r\n    return timerHours.toString().padStart(\"2\", 0);\r\n  }, [timerHours]);\r\n\r\n  const formatMinutes = useMemo(() => {\r\n    return timerMinutes.toString().padStart(\"2\", 0);\r\n  }, [timerMinutes]);\r\n\r\n  const formatSeconds = useMemo(() => {\r\n    return timerSeconds.toString().padStart(\"2\", 0);\r\n  }, [timerSeconds]);\r\n\r\n  // console.log(initHours, formatMinutes, formatSeconds);\r\n  // console.log(timerHours, timerMinutes, timerSeconds);\r\n\r\n\r\n  if (initHours === 0 && formatMinutes === 10 && formatSeconds === 0) {\r\n    alert('로그아웃까지 10분 남았습니다.')\r\n  }\r\n\r\n\r\n\r\n  const startTimer = () => {\r\n    // let interval = useRef();\r\n\r\n    interval = setInterval(() => {\r\n      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n      if (distance < 0) {\r\n        clearInterval(interval)\r\n        loggedOut.loggedOut()\r\n      } else {\r\n        setTimerHours(hours)\r\n        setTimerMinutes(minutes)\r\n        setTimerSeconds(seconds)\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    startTimer();\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {initHours}:{formatMinutes}:{formatSeconds}\r\n    </div>\r\n  );\r\n};\r\n\r\n// const initHours = useMemo(() => {\r\n//   return timerHours.toString().padStart('2', 0)\r\n// }, [timerHours])\r\n\r\n// const formatMinutes = useMemo(() => {\r\n//   return timerMinutes.toString().padStart('2', 0)\r\n// }, [timerMinutes])\r\n\r\n// const formatSeconds = useMemo(() => {\r\n//   return timerSeconds.toString().padStart('2', 0)\r\n// }, [timerSeconds])\r\n\r\n\r\n\r\n\r\n// setInterval 이전 내용\r\n// if (timerHours > 0 && timerMinutes === 0 && timerSeconds === 0) {\r\n//   setTimerHours(timerHours - 1);\r\n//   setTimerMinutes(59);\r\n//   setTimerSeconds(59);\r\n// }\r\n\r\n// if (timerHours === 0 && timerMinutes > 0 && timerSeconds > 0) {\r\n//   setTimerSeconds(timerSeconds - 1)\r\n// }\r\n\r\n// if (timerHours > 0 && timerMinutes > 0 && timerSeconds > 0) {\r\n//   setTimerSeconds(timerSeconds - 1);\r\n// }\r\n\r\n// if (timerHours > 0 && timerMinutes > 0 && timerSeconds === 0) {\r\n//   setTimerMinutes(timerMinutes - 1);\r\n//   setTimerSeconds(59);\r\n// }\r\n\r\n// if (timerHours > 0 && timerMinutes === 0 && timerSeconds > 0) {\r\n//   setTimerSeconds(timerSeconds - 1);\r\n// }\r\n\r\n// if (timerHours === 0 && timerMinutes > 0 && timerSeconds === 0) {\r\n//   setTimerMinutes(timerMinutes - 1);\r\n//   setTimerSeconds(59);\r\n// }\r\n\r\n// if (timerHours === 0 && timerMinutes === 0 && timerSeconds > 0) {\r\n//   setTimerSeconds(timerSeconds - 1);\r\n// }\r\n\r\n// if (timerHours === 0 && timerMinutes === 0 && timerSeconds === 0) {\r\n//   loggedOut.loggedOut();\r\n//   return () => clearInterval(interval.current);\r\n// }"
        }
    ]
}