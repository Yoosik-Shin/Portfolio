{
    "sourceFile": "my-portfolio/src/pages/Login/Login.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1756650269955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756650326397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n         <S.Title>{\"비밀번호\"}</S.Title>\r\n         <S.Input type=\"password\" ref={refPW} placeholder=\"PW\"></S.Input>\r\n       </S.TitleWrap>\r\n       <S.Line />\r\n-      <S.Btn className=\"btn btn-primary\" onClick={onBtn}>{\"로그인\"}</S.Btn>\r\n+      <S.Btn className=\"btn btn-primary w-[98%] h-[48px]\" onClick={onBtn}>{\"로그인\"}</S.Btn>\r\n       <S.Msg>{errMsg}</S.Msg>\r\n       {/* </LoginContext.Provider> */}\r\n       {/* <form className=\"loginSet\" onSubmit={loginForm}> */}\r\n       {/* <div>\r\n"
                },
                {
                    "date": 1756650332936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n         <S.Title>{\"비밀번호\"}</S.Title>\r\n         <S.Input type=\"password\" ref={refPW} placeholder=\"PW\"></S.Input>\r\n       </S.TitleWrap>\r\n       <S.Line />\r\n-      <S.Btn className=\"btn btn-primary w-[98%] h-[48px]\" onClick={onBtn}>{\"로그인\"}</S.Btn>\r\n+      <S.Btn className=\"btn btn-primary w-[98%] h-[40px]\" onClick={onBtn}>{\"로그인\"}</S.Btn>\r\n       <S.Msg>{errMsg}</S.Msg>\r\n       {/* </LoginContext.Provider> */}\r\n       {/* <form className=\"loginSet\" onSubmit={loginForm}> */}\r\n       {/* <div>\r\n"
                },
                {
                    "date": 1756650354471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n         <S.Title>{\"비밀번호\"}</S.Title>\r\n         <S.Input type=\"password\" ref={refPW} placeholder=\"PW\"></S.Input>\r\n       </S.TitleWrap>\r\n       <S.Line />\r\n-      <S.Btn className=\"btn btn-primary w-[98%] h-[40px]\" onClick={onBtn}>{\"로그인\"}</S.Btn>\r\n+      <button className=\"btn btn-primary bg-amber-600 w-[98%] h-[40px]\" onClick={onBtn}>{\"로그인\"}</button>\r\n       <S.Msg>{errMsg}</S.Msg>\r\n       {/* </LoginContext.Provider> */}\r\n       {/* <form className=\"loginSet\" onSubmit={loginForm}> */}\r\n       {/* <div>\r\n"
                },
                {
                    "date": 1756650385983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+import { useState, useRef, useContext } from \"react\";\r\n+import * as S from \"./Login.styled\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n+import setCookie from \"./setCookie\";\r\n+import LoginContextProvider, { LoginContext } from \"./LoginContextProvider\";\r\n+\r\n+export const Login = () => {\r\n+  const [errMsg, setErrMsg] = useState(\"\");\r\n+  const loggedIn = useContext(LoginContext)\r\n+\r\n+  const refID = useRef(null);\r\n+  const refPW = useRef(null);\r\n+\r\n+  const navigate = useNavigate();\r\n+\r\n+  const loginChk = (userJSON, userID, userPw) => {\r\n+    // filter, some 찾아보고\r\n+    // filter => 조건에 맞는거 데이터 전체 리턴\r\n+    // some => 조건에 맞는거 있으면 true\r\n+\r\n+    // 아이디, 비번 둘다 조건 맞는게 있니?\r\n+\r\n+    setErrMsg(\"\");\r\n+    if (userJSON.some((item) => item.id === userID && item.pw === userPw)) {\r\n+      // let date = new Date()\r\n+      // let fiftyMin = date.getTime() + 15*60*1000\r\n+      // let thrHour = date.setHours(date.getHours() + 3)\r\n+      // console.log(thrHour)\r\n+      const name = userJSON.filter(item => item.id === userID && item.pw === userPw)\r\n+      if(name.length === 1) {\r\n+        // setCookie(name[0].nick)\r\n+        loggedIn.login(name[0].nick)\r\n+        // Cookies.set('user', name[0].nick, {expires: 1})\r\n+        // Cookies.set('loginState', true)\r\n+        setTimeout(() => {\r\n+          alert(\"로그인 하셨습니다.\");\r\n+          navigate(\"/header\");\r\n+        }, 0);\r\n+      } else {\r\n+        alert('땡')\r\n+      }\r\n+      // SetCookie(userID, );\r\n+      // console.log(SetCookie);\r\n+\r\n+      return;\r\n+    }\r\n+    // idChk, pwChk는 배열? filter는 애초에 배열에 쓰는 놈\r\n+    const idChk = userJSON.filter((item) => item.id === userID);\r\n+    const pwChk = userJSON.filter((item) => item.pw === userPw);\r\n+\r\n+    // console.log(idChk, pwChk);\r\n+\r\n+    if (idChk.length > 0) {\r\n+      if (!idChk.some((item) => item.pw === userPw)) {\r\n+        setErrMsg(\"비밀번호가 일치하지 않음\");\r\n+        return;\r\n+      }\r\n+    }\r\n+\r\n+    if (pwChk.length > 0) {\r\n+      if (!pwChk.some((item) => item.id === userID)) {\r\n+        setErrMsg(\"아이디가 일치하지 않음\");\r\n+        return;\r\n+      }\r\n+    }\r\n+\r\n+    if (idChk.length === 0 && pwChk.length === 0) {\r\n+      setErrMsg(\"일치하는 사용자 없음\");\r\n+      return;\r\n+    }\r\n+\r\n+    // console.log(idChk);\r\n+    // console.log(pwChk);\r\n+  };\r\n+\r\n+  // const loginForm = (e) => {\r\n+  //   e.preventDefault();\r\n+  //   const user = [\r\n+  //     {\r\n+  //       id: \"cat\",\r\n+  //       pw: \"1234\",\r\n+  //     },\r\n+  //     {\r\n+  //       id: \"dog\",\r\n+  //       pw: \"4321\",\r\n+  //     },\r\n+  //     {\r\n+  //       id: \"cat\",\r\n+  //       pw: \"5555\",\r\n+  //     },\r\n+  //   ];\r\n+\r\n+  //   // user.filter(item => {item.id === userId})\r\n+\r\n+  //   const userId = e.target.user.value;\r\n+  //   const userPw = e.target.pw.value;\r\n+\r\n+  //   loginChk(user, userId, userPw);\r\n+  // };\r\n+\r\n+  const onBtn = () => {\r\n+    const user = [\r\n+      {\r\n+        id: \"cat\",\r\n+        pw: \"1234\",\r\n+        nick: \"냥\",\r\n+      },\r\n+      {\r\n+        id: \"dog\",\r\n+        pw: \"4321\",\r\n+        nick: \"멍\",\r\n+      },\r\n+      {\r\n+        id: \"dog\",\r\n+        pw: \"123\",\r\n+        nick: \"멍멍\",\r\n+      },\r\n+      {\r\n+        id: \"user\",\r\n+        pw: \"user\",\r\n+        nick: \"portfolio\",\r\n+      },\r\n+    ];\r\n+\r\n+    // user.filter(item => {item.id === userId})\r\n+\r\n+    const userId = refID.current.value;\r\n+    const userPw = refPW.current.value;\r\n+\r\n+    loginChk(user, userId, userPw);\r\n+  };\r\n+\r\n+  return (\r\n+    <S.LoginWrap>\r\n+      {/* <LoginContext.Provider> */}\r\n+      <S.TitleWrap>\r\n+        <S.Title>{\"아이디\"}</S.Title>\r\n+        <S.Input ref={refID} placeholder=\"ID\"></S.Input>\r\n+      </S.TitleWrap>\r\n+      <S.TitleWrap>\r\n+        <S.Title>{\"비밀번호\"}</S.Title>\r\n+        <S.Input type=\"password\" ref={refPW} placeholder=\"PW\"></S.Input>\r\n+      </S.TitleWrap>\r\n+      <S.Line />\r\n+      <button className=\"btn btn-primary bg-[#333333a2] w-[98%] h-[40px]\" onClick={onBtn}>{\"로그인\"}</button>\r\n+      <S.Msg>{errMsg}</S.Msg>\r\n+      {/* </LoginContext.Provider> */}\r\n+      {/* <form className=\"loginSet\" onSubmit={loginForm}> */}\r\n+      {/* <div>\r\n+            <p>{errMsg}</p>\r\n+          </div>\r\n+          <div>\r\n+            <input type=\"text\" name=\"user\" placeholder=\"USER ID\" />\r\n+          </div>\r\n+          <p className=\"errId\">{errId}</p>\r\n+          <div>\r\n+            <input type=\"password\" name=\"pw\" placeholder=\"USER PASSWORD\" />\r\n+          </div>\r\n+          <p className=\"errPw\">{errPw}</p>\r\n+          <input type=\"submit\" value=\"LOGIN\" /> */}\r\n+      {/* </form> */}\r\n+    </S.LoginWrap>\r\n+  );\r\n+};\r\n"
                },
                {
                    "date": 1756650403928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n         <S.Title>{\"비밀번호\"}</S.Title>\r\n         <S.Input type=\"password\" ref={refPW} placeholder=\"PW\"></S.Input>\r\n       </S.TitleWrap>\r\n       <S.Line />\r\n-      <button className=\"btn btn-primary bg-[#333333a2] w-[98%] h-[40px]\" onClick={onBtn}>{\"로그인\"}</button>\r\n+      <button className=\"btn btn-primary bg-[#333333a2] w-[98%] h-[40px] rounded-full\" onClick={onBtn}>{\"로그인\"}</button>\r\n       <S.Msg>{errMsg}</S.Msg>\r\n       {/* </LoginContext.Provider> */}\r\n       {/* <form className=\"loginSet\" onSubmit={loginForm}> */}\r\n       {/* <div>\r\n@@ -161,168 +161,4 @@\n       {/* </form> */}\r\n     </S.LoginWrap>\r\n   );\r\n };\r\n-import { useState, useRef, useContext } from \"react\";\r\n-import * as S from \"./Login.styled\";\r\n-import { useNavigate } from \"react-router-dom\";\r\n-import setCookie from \"./setCookie\";\r\n-import LoginContextProvider, { LoginContext } from \"./LoginContextProvider\";\r\n-\r\n-export const Login = () => {\r\n-  const [errMsg, setErrMsg] = useState(\"\");\r\n-  const loggedIn = useContext(LoginContext)\r\n-\r\n-  const refID = useRef(null);\r\n-  const refPW = useRef(null);\r\n-\r\n-  const navigate = useNavigate();\r\n-\r\n-  const loginChk = (userJSON, userID, userPw) => {\r\n-    // filter, some 찾아보고\r\n-    // filter => 조건에 맞는거 데이터 전체 리턴\r\n-    // some => 조건에 맞는거 있으면 true\r\n-\r\n-    // 아이디, 비번 둘다 조건 맞는게 있니?\r\n-\r\n-    setErrMsg(\"\");\r\n-    if (userJSON.some((item) => item.id === userID && item.pw === userPw)) {\r\n-      // let date = new Date()\r\n-      // let fiftyMin = date.getTime() + 15*60*1000\r\n-      // let thrHour = date.setHours(date.getHours() + 3)\r\n-      // console.log(thrHour)\r\n-      const name = userJSON.filter(item => item.id === userID && item.pw === userPw)\r\n-      if(name.length === 1) {\r\n-        // setCookie(name[0].nick)\r\n-        loggedIn.login(name[0].nick)\r\n-        // Cookies.set('user', name[0].nick, {expires: 1})\r\n-        // Cookies.set('loginState', true)\r\n-        setTimeout(() => {\r\n-          alert(\"로그인 하셨습니다.\");\r\n-          navigate(\"/header\");\r\n-        }, 0);\r\n-      } else {\r\n-        alert('땡')\r\n-      }\r\n-      // SetCookie(userID, );\r\n-      // console.log(SetCookie);\r\n-\r\n-      return;\r\n-    }\r\n-    // idChk, pwChk는 배열? filter는 애초에 배열에 쓰는 놈\r\n-    const idChk = userJSON.filter((item) => item.id === userID);\r\n-    const pwChk = userJSON.filter((item) => item.pw === userPw);\r\n-\r\n-    // console.log(idChk, pwChk);\r\n-\r\n-    if (idChk.length > 0) {\r\n-      if (!idChk.some((item) => item.pw === userPw)) {\r\n-        setErrMsg(\"비밀번호가 일치하지 않음\");\r\n-        return;\r\n-      }\r\n-    }\r\n-\r\n-    if (pwChk.length > 0) {\r\n-      if (!pwChk.some((item) => item.id === userID)) {\r\n-        setErrMsg(\"아이디가 일치하지 않음\");\r\n-        return;\r\n-      }\r\n-    }\r\n-\r\n-    if (idChk.length === 0 && pwChk.length === 0) {\r\n-      setErrMsg(\"일치하는 사용자 없음\");\r\n-      return;\r\n-    }\r\n-\r\n-    // console.log(idChk);\r\n-    // console.log(pwChk);\r\n-  };\r\n-\r\n-  // const loginForm = (e) => {\r\n-  //   e.preventDefault();\r\n-  //   const user = [\r\n-  //     {\r\n-  //       id: \"cat\",\r\n-  //       pw: \"1234\",\r\n-  //     },\r\n-  //     {\r\n-  //       id: \"dog\",\r\n-  //       pw: \"4321\",\r\n-  //     },\r\n-  //     {\r\n-  //       id: \"cat\",\r\n-  //       pw: \"5555\",\r\n-  //     },\r\n-  //   ];\r\n-\r\n-  //   // user.filter(item => {item.id === userId})\r\n-\r\n-  //   const userId = e.target.user.value;\r\n-  //   const userPw = e.target.pw.value;\r\n-\r\n-  //   loginChk(user, userId, userPw);\r\n-  // };\r\n-\r\n-  const onBtn = () => {\r\n-    const user = [\r\n-      {\r\n-        id: \"cat\",\r\n-        pw: \"1234\",\r\n-        nick: \"냥\",\r\n-      },\r\n-      {\r\n-        id: \"dog\",\r\n-        pw: \"4321\",\r\n-        nick: \"멍\",\r\n-      },\r\n-      {\r\n-        id: \"dog\",\r\n-        pw: \"123\",\r\n-        nick: \"멍멍\",\r\n-      },\r\n-      {\r\n-        id: \"user\",\r\n-        pw: \"user\",\r\n-        nick: \"portfolio\",\r\n-      },\r\n-    ];\r\n-\r\n-    // user.filter(item => {item.id === userId})\r\n-\r\n-    const userId = refID.current.value;\r\n-    const userPw = refPW.current.value;\r\n-\r\n-    loginChk(user, userId, userPw);\r\n-  };\r\n-\r\n-  return (\r\n-    <S.LoginWrap>\r\n-      {/* <LoginContext.Provider> */}\r\n-      <S.TitleWrap>\r\n-        <S.Title>{\"아이디\"}</S.Title>\r\n-        <S.Input ref={refID} placeholder=\"ID\"></S.Input>\r\n-      </S.TitleWrap>\r\n-      <S.TitleWrap>\r\n-        <S.Title>{\"비밀번호\"}</S.Title>\r\n-        <S.Input type=\"password\" ref={refPW} placeholder=\"PW\"></S.Input>\r\n-      </S.TitleWrap>\r\n-      <S.Line />\r\n-      <button className=\"btn btn-primary bg-amber-600 w-[98%] h-[40px]\" onClick={onBtn}>{\"로그인\"}</button>\r\n-      <S.Msg>{errMsg}</S.Msg>\r\n-      {/* </LoginContext.Provider> */}\r\n-      {/* <form className=\"loginSet\" onSubmit={loginForm}> */}\r\n-      {/* <div>\r\n-            <p>{errMsg}</p>\r\n-          </div>\r\n-          <div>\r\n-            <input type=\"text\" name=\"user\" placeholder=\"USER ID\" />\r\n-          </div>\r\n-          <p className=\"errId\">{errId}</p>\r\n-          <div>\r\n-            <input type=\"password\" name=\"pw\" placeholder=\"USER PASSWORD\" />\r\n-          </div>\r\n-          <p className=\"errPw\">{errPw}</p>\r\n-          <input type=\"submit\" value=\"LOGIN\" /> */}\r\n-      {/* </form> */}\r\n-    </S.LoginWrap>\r\n-  );\r\n-};\r\n"
                },
                {
                    "date": 1756650419931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n         <S.Title>{\"비밀번호\"}</S.Title>\r\n         <S.Input type=\"password\" ref={refPW} placeholder=\"PW\"></S.Input>\r\n       </S.TitleWrap>\r\n       <S.Line />\r\n-      <button className=\"btn btn-primary bg-[#333333a2] w-[98%] h-[40px] rounded-full\" onClick={onBtn}>{\"로그인\"}</button>\r\n+      <button className=\"btn btn-primary bg-[#333333a2] w-[98%] h-[40px] rounded-full hover:bg-[#222222]\" onClick={onBtn}>{\"로그인\"}</button>\r\n       <S.Msg>{errMsg}</S.Msg>\r\n       {/* </LoginContext.Provider> */}\r\n       {/* <form className=\"loginSet\" onSubmit={loginForm}> */}\r\n       {/* <div>\r\n"
                },
                {
                    "date": 1756650429231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n         <S.Title>{\"비밀번호\"}</S.Title>\r\n         <S.Input type=\"password\" ref={refPW} placeholder=\"PW\"></S.Input>\r\n       </S.TitleWrap>\r\n       <S.Line />\r\n-      <button className=\"btn btn-primary bg-[#333333a2] w-[98%] h-[40px] rounded-full hover:bg-[#222222]\" onClick={onBtn}>{\"로그인\"}</button>\r\n+      <button className=\"btn btn-primary bg-[#333333a2] w-[98%] h-[40px] rounded-full hover:bg-[#49494988]\" onClick={onBtn}>{\"로그인\"}</button>\r\n       <S.Msg>{errMsg}</S.Msg>\r\n       {/* </LoginContext.Provider> */}\r\n       {/* <form className=\"loginSet\" onSubmit={loginForm}> */}\r\n       {/* <div>\r\n"
                },
                {
                    "date": 1756650553813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,8 +133,9 @@\n   return (\r\n     <S.LoginWrap>\r\n       {/* <LoginContext.Provider> */}\r\n       <S.TitleWrap>\r\n+        <div className=\"title\">😁환영합니다😁</div>\r\n         <S.Title>{\"아이디\"}</S.Title>\r\n         <S.Input ref={refID} placeholder=\"ID\"></S.Input>\r\n       </S.TitleWrap>\r\n       <S.TitleWrap>\r\n"
                },
                {
                    "date": 1756650661074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,13 +132,13 @@\n \r\n   return (\r\n     <S.LoginWrap>\r\n       {/* <LoginContext.Provider> */}\r\n-      <S.TitleWrap>\r\n+      <div className=\"title-wrap flex flex-col justify-center items-center mb-3\">\r\n         <div className=\"title\">😁환영합니다😁</div>\r\n         <S.Title>{\"아이디\"}</S.Title>\r\n         <S.Input ref={refID} placeholder=\"ID\"></S.Input>\r\n-      </S.TitleWrap>\r\n+      </div>\r\n       <S.TitleWrap>\r\n         <S.Title>{\"비밀번호\"}</S.Title>\r\n         <S.Input type=\"password\" ref={refPW} placeholder=\"PW\"></S.Input>\r\n       </S.TitleWrap>\r\n"
                },
                {
                    "date": 1756650709428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,10 +132,10 @@\n \r\n   return (\r\n     <S.LoginWrap>\r\n       {/* <LoginContext.Provider> */}\r\n+      <div className=\"title\">😁환영합니다😁</div>\r\n       <div className=\"title-wrap flex flex-col justify-center items-center mb-3\">\r\n-        <div className=\"title\">😁환영합니다😁</div>\r\n         <S.Title>{\"아이디\"}</S.Title>\r\n         <S.Input ref={refID} placeholder=\"ID\"></S.Input>\r\n       </div>\r\n       <S.TitleWrap>\r\n"
                },
                {
                    "date": 1756650731099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n   return (\r\n     <S.LoginWrap>\r\n       {/* <LoginContext.Provider> */}\r\n       <div className=\"title\">😁환영합니다😁</div>\r\n-      <div className=\"title-wrap flex flex-col justify-center items-center mb-3\">\r\n+      <div className=\"title-wrap flex justify-center items-center mb-3\">\r\n         <S.Title>{\"아이디\"}</S.Title>\r\n         <S.Input ref={refID} placeholder=\"ID\"></S.Input>\r\n       </div>\r\n       <S.TitleWrap>\r\n"
                }
            ],
            "date": 1756650269955,
            "name": "Commit-0",
            "content": "import { useState, useRef, useContext } from \"react\";\r\nimport * as S from \"./Login.styled\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport setCookie from \"./setCookie\";\r\nimport LoginContextProvider, { LoginContext } from \"./LoginContextProvider\";\r\n\r\nexport const Login = () => {\r\n  const [errMsg, setErrMsg] = useState(\"\");\r\n  const loggedIn = useContext(LoginContext)\r\n\r\n  const refID = useRef(null);\r\n  const refPW = useRef(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const loginChk = (userJSON, userID, userPw) => {\r\n    // filter, some 찾아보고\r\n    // filter => 조건에 맞는거 데이터 전체 리턴\r\n    // some => 조건에 맞는거 있으면 true\r\n\r\n    // 아이디, 비번 둘다 조건 맞는게 있니?\r\n\r\n    setErrMsg(\"\");\r\n    if (userJSON.some((item) => item.id === userID && item.pw === userPw)) {\r\n      // let date = new Date()\r\n      // let fiftyMin = date.getTime() + 15*60*1000\r\n      // let thrHour = date.setHours(date.getHours() + 3)\r\n      // console.log(thrHour)\r\n      const name = userJSON.filter(item => item.id === userID && item.pw === userPw)\r\n      if(name.length === 1) {\r\n        // setCookie(name[0].nick)\r\n        loggedIn.login(name[0].nick)\r\n        // Cookies.set('user', name[0].nick, {expires: 1})\r\n        // Cookies.set('loginState', true)\r\n        setTimeout(() => {\r\n          alert(\"로그인 하셨습니다.\");\r\n          navigate(\"/header\");\r\n        }, 0);\r\n      } else {\r\n        alert('땡')\r\n      }\r\n      // SetCookie(userID, );\r\n      // console.log(SetCookie);\r\n\r\n      return;\r\n    }\r\n    // idChk, pwChk는 배열? filter는 애초에 배열에 쓰는 놈\r\n    const idChk = userJSON.filter((item) => item.id === userID);\r\n    const pwChk = userJSON.filter((item) => item.pw === userPw);\r\n\r\n    // console.log(idChk, pwChk);\r\n\r\n    if (idChk.length > 0) {\r\n      if (!idChk.some((item) => item.pw === userPw)) {\r\n        setErrMsg(\"비밀번호가 일치하지 않음\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (pwChk.length > 0) {\r\n      if (!pwChk.some((item) => item.id === userID)) {\r\n        setErrMsg(\"아이디가 일치하지 않음\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (idChk.length === 0 && pwChk.length === 0) {\r\n      setErrMsg(\"일치하는 사용자 없음\");\r\n      return;\r\n    }\r\n\r\n    // console.log(idChk);\r\n    // console.log(pwChk);\r\n  };\r\n\r\n  // const loginForm = (e) => {\r\n  //   e.preventDefault();\r\n  //   const user = [\r\n  //     {\r\n  //       id: \"cat\",\r\n  //       pw: \"1234\",\r\n  //     },\r\n  //     {\r\n  //       id: \"dog\",\r\n  //       pw: \"4321\",\r\n  //     },\r\n  //     {\r\n  //       id: \"cat\",\r\n  //       pw: \"5555\",\r\n  //     },\r\n  //   ];\r\n\r\n  //   // user.filter(item => {item.id === userId})\r\n\r\n  //   const userId = e.target.user.value;\r\n  //   const userPw = e.target.pw.value;\r\n\r\n  //   loginChk(user, userId, userPw);\r\n  // };\r\n\r\n  const onBtn = () => {\r\n    const user = [\r\n      {\r\n        id: \"cat\",\r\n        pw: \"1234\",\r\n        nick: \"냥\",\r\n      },\r\n      {\r\n        id: \"dog\",\r\n        pw: \"4321\",\r\n        nick: \"멍\",\r\n      },\r\n      {\r\n        id: \"dog\",\r\n        pw: \"123\",\r\n        nick: \"멍멍\",\r\n      },\r\n      {\r\n        id: \"user\",\r\n        pw: \"user\",\r\n        nick: \"portfolio\",\r\n      },\r\n    ];\r\n\r\n    // user.filter(item => {item.id === userId})\r\n\r\n    const userId = refID.current.value;\r\n    const userPw = refPW.current.value;\r\n\r\n    loginChk(user, userId, userPw);\r\n  };\r\n\r\n  return (\r\n    <S.LoginWrap>\r\n      {/* <LoginContext.Provider> */}\r\n      <S.TitleWrap>\r\n        <S.Title>{\"아이디\"}</S.Title>\r\n        <S.Input ref={refID} placeholder=\"ID\"></S.Input>\r\n      </S.TitleWrap>\r\n      <S.TitleWrap>\r\n        <S.Title>{\"비밀번호\"}</S.Title>\r\n        <S.Input type=\"password\" ref={refPW} placeholder=\"PW\"></S.Input>\r\n      </S.TitleWrap>\r\n      <S.Line />\r\n      <S.Btn className=\"btn btn-primary\" onClick={onBtn}>{\"로그인\"}</S.Btn>\r\n      <S.Msg>{errMsg}</S.Msg>\r\n      {/* </LoginContext.Provider> */}\r\n      {/* <form className=\"loginSet\" onSubmit={loginForm}> */}\r\n      {/* <div>\r\n            <p>{errMsg}</p>\r\n          </div>\r\n          <div>\r\n            <input type=\"text\" name=\"user\" placeholder=\"USER ID\" />\r\n          </div>\r\n          <p className=\"errId\">{errId}</p>\r\n          <div>\r\n            <input type=\"password\" name=\"pw\" placeholder=\"USER PASSWORD\" />\r\n          </div>\r\n          <p className=\"errPw\">{errPw}</p>\r\n          <input type=\"submit\" value=\"LOGIN\" /> */}\r\n      {/* </form> */}\r\n    </S.LoginWrap>\r\n  );\r\n};\r\n"
        }
    ]
}